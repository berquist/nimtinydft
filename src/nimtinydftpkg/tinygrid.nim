import unittest

import arraymancer

type
  BaseGrid = object of RootObj
    points: seq[float]
    weights: seq[float]

func integrate(grid: BaseGrid, multi_fnvals: varargs[seq[float]]): seq[float] =
  ## Compute the definite integrals (of products) of functions
  ##
  ## Parameters:
  ##
  ##   fnvals1, fnvals2, ...
  ##
  ##       Each argument is an N-dimensional array of function values, where
  ##       the last index corresponds to the grid points. The arrays are
  ##       contracted over their last index and the resulting functions are
  ##       all integrated. This allows many products of functions to be
  ##       integrated in one shot.
  ##
  ##  Returns:
  ##
  ##    integrals
  ##
  ##        ALl integrals of products of functions. The shape is
  ##        ``sum(fnvals.shape[:-1] for fnvals in multi_fnvals)``.
  discard

func getGaussLegendreWeights(nPoints: int): tuple[nodes: seq[float], weights: seq[float]] {.inline.} =
  ## Stolen from
  ## https://github.com/HugoGranstrom/numericalnim/blob/b714fecf3a52bde5b98162fe1790005b2f23d602/src/numericalnim/integrate.nim#L354,
  ## since it isn't exported from the file.
  ##
  ## TODO the order of the nodes is reversed from numpy.legendre.leggauss?
  assert(0 < nPoints and nPoints <= 20, "nPoints must be an integer between 1 and 20.")
  const gaussWeights: array[1..20, (seq, seq)] = [
        (@[0.0],
         @[2.0]),
        (@[-0.5773502691896257645092, 0.5773502691896257645092],
         @[1.0, 1.0]),
        (@[-0.7745966692414833770359, 0.0, 0.7745966692414833770359],
         @[0.5555555555555555555556, 0.8888888888888888888889, 0.555555555555555555556]),
        (@[-0.861136311594052575224, -0.3399810435848562648027, 0.3399810435848562648027, 0.861136311594052575224],
         @[0.3478548451374538573731, 0.6521451548625461426269, 0.6521451548625461426269, 0.3478548451374538573731]),
        (@[0.90617984593866385,0.538469310105683,0,-0.538469310105683,-0.90617984593866385],
         @[0.23692688505618911,0.47862867049936625,0.56888888888888889,0.47862867049936625,0.23692688505618911]),
        (@[0.932469514203152,0.66120938646626448,0.23861918608319693,-0.23861918608319693,-0.66120938646626448,-0.932469514203152],
         @[0.1713244923791705,0.36076157304813866,0.467913934572691,0.467913934572691,0.36076157304813866,0.1713244923791705]),
        (@[0.94910791234275838,0.74153118559939446,0.40584515137739713,0,
           -0.40584515137739713,-0.74153118559939446,-0.94910791234275838],
         @[0.12948496616886965,0.27970539148927676,0.38183005050511903,0.41795918367346935,
           0.38183005050511903,0.27970539148927676,0.12948496616886965]),
        (@[0.9602898564975364,0.79666647741362673,0.525532409916329,0.18343464249564984,
           -0.18343464249564984,-0.525532409916329,-0.79666647741362673,-0.9602898564975364],
         @[0.10122853629037681,0.22238103445337443,0.31370664587788732,0.3626837833783621,
           0.3626837833783621,0.31370664587788732,0.22238103445337443,0.10122853629037681]),
        (@[0.96816023950762609,0.83603110732663577,0.61337143270059036,0.32425342340380897,
           0,-0.32425342340380897,-0.61337143270059036,-0.83603110732663577,-0.96816023950762609],
         @[0.081274388361574634,0.1806481606948574,0.26061069640293555,0.31234707704000292,
           0.33023935500125978,0.31234707704000292,0.26061069640293555,0.1806481606948574,0.081274388361574634]),
        (@[0.97390652851717174,0.86506336668898465,0.67940956829902444,0.43339539412924721,0.14887433898163116,
           -0.14887433898163116,-0.43339539412924721,-0.67940956829902444,-0.86506336668898465,-0.97390652851717174],
         @[0.066671344308688027,0.14945134915058056,0.21908636251598207,0.26926671930999618,0.29552422471475293,
           0.29552422471475293,0.26926671930999618,0.21908636251598207,0.14945134915058056,0.066671344308688027]),
        (@[0.97822865814605686,0.88706259976809543,0.73015200557404936,0.5190961292068117,0.2695431559523449,
           0,-0.2695431559523449,-0.5190961292068117,
           -0.73015200557404936,-0.88706259976809543,-0.97822865814605686],
         @[0.055668567116173538,0.12558036946490408,0.186290210927734,0.23319376459199023,0.26280454451024671,
           0.27292508677790062,0.26280454451024671,0.23319376459199023,
           0.186290210927734,0.12558036946490408,0.055668567116173538]),
        (@[0.98156063424671913,0.90411725637047491,0.76990267419430469,
           0.58731795428661737,0.36783149899818013,0.12523340851146886,
           -0.12523340851146886,-0.36783149899818013,-0.58731795428661737,
           -0.76990267419430469,-0.90411725637047491,-0.98156063424671913],
         @[0.0471753363865118,0.10693932599531812,0.16007832854334605,
           0.20316742672306581,0.23349253653835478,0.24914704581340286,
           0.24914704581340286,0.23349253653835478,0.20316742672306581,
           0.16007832854334605,0.10693932599531812,0.0471753363865118]),
        (@[0.98418305471858814,0.91759839922297792,0.80157809073330988,
           0.64234933944034012,0.44849275103644692,0.23045831595513477,
           0,-0.23045831595513477,-0.44849275103644692,
           -0.64234933944034012,-0.80157809073330988,-0.91759839922297792,-0.98418305471858814],
         @[0.040484004765315815,0.092121499837728438,0.13887351021978714,
           0.17814598076194568,0.20781604753688834,0.22628318026289709,
           0.2325515532308739,0.22628318026289709,0.20781604753688834,
           0.17814598076194568,0.13887351021978714,0.092121499837728438,0.040484004765315815]),
        (@[0.98628380869681243,0.92843488366357363,0.827201315069765,
           0.68729290481168537,0.5152486363581541,0.31911236892788969,0.10805494870734367,
           -0.10805494870734367,-0.31911236892788969,-0.5152486363581541,
           -0.68729290481168537,-0.827201315069765,-0.92843488366357363,-0.98628380869681243],
         @[0.035119460331752,0.080158087159760041,0.1215185706879032,
           0.15720316715819357,0.18553839747793785,0.20519846372129569,0.21526385346315768,
           0.21526385346315768,0.20519846372129569,0.18553839747793785,
           0.15720316715819357,0.1215185706879032,0.080158087159760041,0.035119460331752]),
        (@[0.98799251802048538,0.937273392400706,0.84820658341042732,
           0.72441773136017007,0.57097217260853883,0.39415134707756344,0.20119409399743454,
           0,-0.20119409399743454,-0.39415134707756344,
           -0.57097217260853883,-0.72441773136017007,-0.84820658341042732,-0.937273392400706,-0.98799251802048538],
         @[0.030753241996116634,0.070366047488108138,0.1071592204671718,
           0.13957067792615424,0.16626920581699395,0.18616100001556207,0.19843148532711161,
           0.20257824192556126,0.19843148532711161,0.18616100001556207,
           0.16626920581699395,0.13957067792615424,0.1071592204671718,0.070366047488108138,0.030753241996116634]),
        (@[0.98940093499164994,0.9445750230732326,0.86563120238783187,0.75540440835500311,
           0.61787624440264377,0.45801677765722731,0.28160355077925892,0.095012509837637482,
           -0.095012509837637482,-0.28160355077925892,-0.45801677765722731,-0.61787624440264377,
           -0.75540440835500311,-0.86563120238783187,-0.9445750230732326,-0.98940093499164994],
         @[0.027152459411754058,0.062253523938647776,0.0951585116824929,0.12462897125553393,
           0.14959598881657682,0.16915651939500256,0.18260341504492361,0.18945061045506845,
           0.18945061045506845,0.18260341504492361,0.16915651939500256,0.14959598881657682,
           0.12462897125553393,0.0951585116824929,0.062253523938647776,0.027152459411754058]),
        (@[0.99057547531441736,0.95067552176876768,0.8802391537269858,0.78151400389680137,
           0.65767115921669062,0.51269053708647694,0.35123176345387636,0.17848418149584783,
           0,-0.17848418149584783,-0.35123176345387636,-0.51269053708647694,
           -0.65767115921669062,-0.78151400389680137,-0.8802391537269858,-0.95067552176876768,-0.99057547531441736],
         @[0.024148302868547931,0.055459529373987133,0.085036148317179164,0.11188384719340388,
           0.13513636846852545,0.15404576107681039,0.1680041021564499,0.17656270536699264,
           0.17944647035620653,0.17656270536699264,0.1680041021564499,0.15404576107681039,
           0.13513636846852545,0.11188384719340388,0.085036148317179164,0.055459529373987133,0.024148302868547931]),
        (@[0.991565168420931,0.9558239495713976,0.89260246649755581,0.80370495897252314,
           0.69168704306035322,0.55977083107394754,0.41175116146284263,0.25188622569150554,
           0.084775013041735292,-0.084775013041735292,-0.25188622569150554,-0.41175116146284263,
           -0.55977083107394754,-0.69168704306035322,-0.80370495897252314,
           -0.89260246649755581,-0.9558239495713976,-0.991565168420931],
         @[0.021616013526483353,0.049714548894969283,0.0764257302548889,0.10094204410628704,
           0.12255520671147835,0.1406429146706506,0.15468467512626538,0.1642764837458327,
           0.16914238296314352,0.16914238296314352,0.1642764837458327,0.15468467512626538,
           0.1406429146706506,0.12255520671147835,0.10094204410628704,
           0.0764257302548889,0.049714548894969283,0.021616013526483353]),
        (@[0.99240684384358424,0.96020815213483,0.903155903614818,0.82271465653714282,
           0.72096617733522939,0.6005453046616811,0.464570741375961,0.31656409996362989,
           0.16035864564022534,0,-0.16035864564022534,-0.31656409996362989,
           -0.464570741375961,-0.6005453046616811,-0.72096617733522939,-0.82271465653714282,
           -0.903155903614818,-0.96020815213483,-0.99240684384358424],
         @[0.01946178822972643,0.044814226765699405,0.06904454273764106,0.091490021622449916,
           0.11156664554733405,0.12875396253933627,0.14260670217360666,0.15276604206585967,
           0.1589688433939544,0.16105444984878367,0.1589688433939544,0.15276604206585967,
           0.14260670217360666,0.12875396253933627,0.11156664554733405,0.091490021622449916,
           0.06904454273764106,0.044814226765699405,0.01946178822972643]),
        (@[0.99312859918509488,0.96397192727791392,0.912234428251326,0.83911697182221889,
           0.7463319064601508,0.63605368072651514,0.51086700195082724,0.37370608871541955,
           0.22778585114164507,0.076526521133497338,-0.076526521133497338,-0.22778585114164507,
           -0.37370608871541955,-0.51086700195082724,-0.63605368072651514,-0.7463319064601508,
           -0.83911697182221889,-0.912234428251326,-0.96397192727791392,-0.99312859918509488],
         @[0.01761400713915167,0.04060142980038705,0.06267204833410904,0.083276741576704769,
           0.1019301198172405,0.11819453196151831,0.13168863844917658,0.14209610931838215,
           0.14917298647260382,0.152753387130726,0.152753387130726,0.14917298647260382,
           0.14209610931838215,0.13168863844917658,0.11819453196151831,0.1019301198172405,
           0.083276741576704769,0.06267204833410904,0.04060142980038705,0.01761400713915167])
  ]
  return gaussWeights[nPoints]

### TODO put these back in arraymancer/tensor/operators_blas_l1

# #########################################################
# # Tensor-scalar linear algebra

proc `+`*[T: SomeNumber|Complex[float32]|Complex[float64]](a: T, t: Tensor[T]): Tensor[T] {.noInit.} =
  ## Element-wise addition with a scalar
  t.map_inline(x + a)

proc `+`*[T: SomeNumber|Complex[float32]|Complex[float64]](t: Tensor[T], a: T): Tensor[T] {.noInit.} =
  ## Element-wise addition with a scalar
  a + t

# #########################################################
# # Tensor-scalar in-place linear algebra

proc `+=`*[T: SomeNumber|Complex[float32]|Complex[float64]](t: var Tensor[T], a: T) =
  ## Element-wise addition with a scalar (in-place)
  t.apply_inline(x + a)

func legvander[T](x: seq[T], deg: int): Tensor[T] =
  if deg < 0:
    raise newException(ValueError, "deg must be non-negative")
  let xt = x.toTensor().reshape(1, x.len)
  result = newTensor[T]([deg + 1, deg + 1])
  # Use forward recursion to generate the entries. This is not as accurate as
  # reverse recursion in this application but it is more efficient.
  result[0, _] = xt * T(0) + T(1)
  if deg > 0:
    result[1, _] = xt
    for i in 2..<(deg + 1):
      result[i, _] = (result[i - 1, _] *. xt * T(2 * i - 1) -. result[i - 2, _] * T(i - 1)) / T(i)
  # TODO why doesn't this work
  # result = result.permute(0, -1)
  result = result.transpose()

type
  LegendreGrid = object of BaseGrid
    npoint: int
    basis: Tensor[float]
    # basis_inv: Tensor[float]

func newLegendreGrid(npoint: int): LegendreGrid =
  let (nodes, weights) = getGaussLegendreWeights(npoint)
  result = LegendreGrid(
    npoint: npoint,
    points: nodes,
    weights: weights,
  )
  let
    basis = legvander(nodes, npoint - 1)
    (u, s, vt) = basis.svd()
    # basisInv = einsum(u, s, vt):
    #   basisInv[i, k] = vt[j, i] * (1.0 / s[j]) * u[k, j]
    # basisInv = vt * (1.0 / s) * u
  result.basis = basis
  # result.basisInv = basisInv

type
  TransformedGrid = object of BaseGrid

suite "tinygrid":

  test "vandermonde":
    let
      npoint = 5
      (nodes, weights) = getGaussLegendreWeights(npoint)
    echo legvander(nodes, npoint - 1)

  test "low_grid_basics":
    let npoints = [10, 20]
    for npoint in npoints:
      let grid = newLegendreGrid(npoint)
      echo grid
